{"nbformat":4,"nbformat_minor":0,"metadata":{"hide_input":false,"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false},"colab":{"name":"Копия блокнота \"[seminar,basic]pandas.ipynb\"","provenance":[{"file_id":"1Ri4lm7IzZdPGdgJaQwp3QQ0uqLBRkBh2","timestamp":1602908880848}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"nfZIlAQIKEa5"},"source":["<p style=\"align: center;\"><img align=center src=\"https://s8.hostingkartinok.com/uploads/images/2018/08/308b49fcfbc619d629fe4604bceb67ac.jpg\" width=500 height=450/></p>\n","\n","<h3 style=\"text-align: center;\"><b>\"Глубокое обучение\". Продвинутый поток</b></h3>\n","\n","<h2 style=\"text-align: center;\"><b>День 3. Библиотека <a href=\"http://pandas.pydata.org/\">pandas</a></b></h2>"]},{"cell_type":"markdown","metadata":{"id":"ChvYru-EKEa7"},"source":["Библиотека `pandas` активно используется в современном data science для работы с данными, которые могут быть представлены в виде таблиц (а это очень, очень большая часть данных)"]},{"cell_type":"markdown","metadata":{"id":"Q5b3JXTMKEa8"},"source":["`pandas` есть в пакете Anaconda, но если вдруг у Вас её по каким-то причинам нет, то можно установить, раскомментировав следующую команду:"]},{"cell_type":"code","metadata":{"id":"Lkf2vPUnKEa9"},"source":["# !pip install numpy pandas"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eafVy4oGKEbD","executionInfo":{"status":"ok","timestamp":1602911372999,"user_tz":-180,"elapsed":1211,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["import numpy as np\n","import pandas as pd"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZwdBsC9pKEbH"},"source":["## pd.Series"]},{"cell_type":"markdown","metadata":{"id":"2eBYgKrEKEbI"},"source":["Одномерный набор данных. Похож на `np.ndarray`, но с более расширенным функционалом"]},{"cell_type":"code","metadata":{"id":"v5IZnSHjKEbJ"},"source":["np.random.seed(42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G_jV9PpQKEbO","outputId":"6bb24e27-5b5c-4fdc-98d7-e1c524507427"},"source":["np_array = np.random.randint(low=-15, high=20, size=4)\n","np_array"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([13, -1, -8,  5])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"cuhLC4KwKEbT","outputId":"c0edb62f-8dca-478f-effb-011555629e19"},"source":["# Series можно сделать из массива\n","pd_series_1 = pd.Series(np_array)\n","pd_series_1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    13\n","1    -1\n","2    -8\n","3     5\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"CtTy0kkEKEbX","outputId":"e3b812b7-03e1-4f0c-88cc-61f1b2a4dff7"},"source":["# Так же можно аннотировать индексы, чтобы потом было более удобно обращаться к элементам\n","pd_series_2 = pd.Series(np_array, index=['1st day', '2nd day', '3rd day', '4th day'])\n","pd_series_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1st day    13\n","2nd day    -1\n","3rd day    -8\n","4th day     5\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"2IhYD42aKEbd","outputId":"283b2dd5-d66b-4f5d-e65e-ba123684909b"},"source":["pd_series_2['4th day']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"c0oiu9rRKEbh","outputId":"74d59c74-ac5c-4dba-805b-aafc70124249"},"source":["# А еще можно дать pd.Series имя, чтобы было совсем красиво\n","pd_series_3 = pd.Series(np_array, index=['1st day', '2nd day', '3rd day', '4th day'], name='Temperature')\n","pd_series_3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1st day    13\n","2nd day    -1\n","3rd day    -8\n","4th day     5\n","Name: Temperature, dtype: int64"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"EeNoPJxeKEbl","outputId":"26fad4a4-0730-4dce-9e18-de26727bd70d"},"source":["# с индексами можно работать так же, как и в случае с обычным list\n","print(pd_series_3[0])\n","print('*'*5)\n","print(pd_series_3[1:3])\n","print('*'*5)\n","print(pd_series_3[::-1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["13\n","*****\n","2nd day   -1\n","3rd day   -8\n","Name: Temperature, dtype: int64\n","*****\n","4th day     5\n","3rd day    -8\n","2nd day    -1\n","1st day    13\n","Name: Temperature, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6AGQx7lFKEbp"},"source":["`series` можно отсортировать как по значениям, так и по индексу"]},{"cell_type":"code","metadata":{"id":"lWUR7nrIKEbq","outputId":"6a191ed3-f085-49a2-dfa0-38dc3665828a"},"source":["pd_series_3.sort_index()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1st day    13\n","2nd day    -1\n","3rd day    -8\n","4th day     5\n","Name: Temperature, dtype: int64"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"Z5fR1a1vKEbv","outputId":"c87cc752-5832-4c4c-e661-3aae3efe012d"},"source":["pd_series_3.sort_values()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3rd day    -8\n","2nd day    -1\n","4th day     5\n","1st day    13\n","Name: Temperature, dtype: int64"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"WdMZMJLVKEb0"},"source":["с `series` можно работать как с `np.ndarray`"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"_61Xk26QKEb0","outputId":"dd1d835e-fe97-4af2-946c-5c1d8974b1a3"},"source":["pd_series_3 + 100"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1st day    113\n","2nd day     99\n","3rd day     92\n","4th day    105\n","Name: Temperature, dtype: int64"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"M3EphsCcKEb4","outputId":"ea6bd297-1fad-4d15-a905-66574aa54660"},"source":["np.exp(pd_series_3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1st day    442413.392009\n","2nd day         0.367879\n","3rd day         0.000335\n","4th day       148.413159\n","Name: Temperature, dtype: float64"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"_en6VrNEKEb8","outputId":"b7a94056-7640-4ad1-8e2c-e268fe3b44f0"},"source":["term_1 = pd.Series(np.random.randint(0, 10, 5))\n","term_2 = pd.Series(np.random.randint(0, 10, 6))\n","\n","print('Term1:\\n{}\\n\\nTerm2:\\n{}\\n\\nSum:\\n{}'.format(term_1, term_2, term_1 + term_2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Term1:\n","0    6\n","1    9\n","2    2\n","3    6\n","4    7\n","dtype: int64\n","\n","Term2:\n","0    4\n","1    3\n","2    7\n","3    7\n","4    2\n","5    5\n","dtype: int64\n","\n","Sum:\n","0    10.0\n","1    12.0\n","2     9.0\n","3    13.0\n","4     9.0\n","5     NaN\n","dtype: float64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3oy9-zRjKEcA","outputId":"a49d8ad3-2ef7-4a82-9640-3fc1efeab267"},"source":["term_1.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5,)"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"oz4pJ00pKEcE","outputId":"734a90df-3429-4799-d800-348c5437ee09"},"source":["date_range = pd.date_range('20190101', periods=10)\n","pd_series_4 = pd.Series(np.random.rand(10), date_range)\n","pd_series_4"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2019-01-01    0.399861\n","2019-01-02    0.046666\n","2019-01-03    0.973756\n","2019-01-04    0.232771\n","2019-01-05    0.090606\n","2019-01-06    0.618386\n","2019-01-07    0.382462\n","2019-01-08    0.983231\n","2019-01-09    0.466763\n","2019-01-10    0.859940\n","Freq: D, dtype: float64"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"-2tVHwwoKEcJ","outputId":"fedbddab-ed29-4d7f-bf41-962ce05c5571"},"source":["pd_series_4 > 0.5"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2019-01-01    False\n","2019-01-02    False\n","2019-01-03     True\n","2019-01-04    False\n","2019-01-05    False\n","2019-01-06     True\n","2019-01-07    False\n","2019-01-08     True\n","2019-01-09    False\n","2019-01-10     True\n","Freq: D, dtype: bool"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"TqFAOBKaKEcO"},"source":["в качестве индекса можно указать выражение, и нам будут возвращены только те элементы, для которых знвчение является `True`"]},{"cell_type":"code","metadata":{"id":"XL2kbqXeKEcO","outputId":"14997e59-96e4-4cf6-f47f-d745e26082a7"},"source":["pd_series_4[pd_series_4 > 0.5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2019-01-03    0.973756\n","2019-01-06    0.618386\n","2019-01-08    0.983231\n","2019-01-10    0.859940\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"mUCVkYtHKEcS","outputId":"be6fe0f6-dffe-439d-d81e-abe0e031175e"},"source":["pd_series_4[(pd_series_4 > 0.5) & (pd_series_4 < 0.6)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Series([], Freq: D, dtype: float64)"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"tSlzr1kqKEcX","outputId":"54886311-0c7c-4ea3-dbb9-0159bf3d646e"},"source":["pd_series_4[(pd_series_4 > 0.6) | (pd_series_4 < 0.2)]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2019-01-02    0.046666\n","2019-01-03    0.973756\n","2019-01-05    0.090606\n","2019-01-06    0.618386\n","2019-01-08    0.983231\n","2019-01-10    0.859940\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"pKxNs5F8KEca"},"source":["## DataFrame\n","\n","Двумерная таблица данных. Имеет индекс и набор столбцов (возможно, имеющих разные типы). Таблицу можно построить, например, из словаря, значениями в котором являются одномерные наборы данных."]},{"cell_type":"code","metadata":{"id":"t7s_6HAIKEcb","outputId":"e201c0a4-e3c6-4d43-ccfb-c10cc0c0a0e0"},"source":["# Dataframe можно составить из словаря. Ключ будет соответсовать колонке\n","d={'one':pd.Series([1,2,3],index=['a','b','c']),\n","   'two':pd.Series([1,2,3,4],index=['a','b','c','d'])}\n","df=pd.DataFrame(d)\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>one</th>\n","      <th>two</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>a</th>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>b</th>\n","      <td>2.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>c</th>\n","      <td>3.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>d</th>\n","      <td>NaN</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   one  two\n","a  1.0    1\n","b  2.0    2\n","c  3.0    3\n","d  NaN    4"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"Syl7wvXcKEcf","outputId":"85e6e44c-073a-438a-af78-355901688a34"},"source":["df.index"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['a', 'b', 'c', 'd'], dtype='object')"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"CFMV5qMMKEck","outputId":"66e2ad3d-4c8d-441b-83a3-88138e3ef82c"},"source":["df.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['one', 'two'], dtype='object')"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"AG84Y4OGKEcq","outputId":"cf66caf5-f83c-4eea-fbf8-b385b5fc8d6b"},"source":["df['one']['c']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.0"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"rmGuraBXKEcu","outputId":"2bea1b03-99f5-4dcc-f0e4-d18754989b40"},"source":["df.one"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["a    1.0\n","b    2.0\n","c    3.0\n","d    NaN\n","Name: one, dtype: float64"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"shaMbQxXKEcy"},"source":["Если указать диапазон индексов, то это означает диапазон строк. Причём **последняя строка включается в таблицу.**\n","\n","Диапазон целых чисел даёт диапазон строк с такими номерами, **не включая последнюю строку** (как обычно при индексировании списков). \n","\n","На это стоит обратить внимание"]},{"cell_type":"code","metadata":{"id":"VhwIkdhUKEcy","outputId":"71622f5c-ef3e-4ef0-e109-57a6c11b96f2"},"source":["df['b':'d']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>one</th>\n","      <th>two</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>b</th>\n","      <td>2.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>c</th>\n","      <td>3.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>d</th>\n","      <td>NaN</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   one  two\n","b  2.0    2\n","c  3.0    3\n","d  NaN    4"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"FvSoFyzfKEc1","outputId":"9b5baf29-1e7e-4c83-f7f2-caf4ba07de2f"},"source":["df[3:1:-1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>one</th>\n","      <th>two</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>d</th>\n","      <td>NaN</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>c</th>\n","      <td>3.0</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   one  two\n","d  NaN    4\n","c  3.0    3"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"_SoghY6zKEc4","outputId":"313af37e-ca1d-4439-ef8c-60a907ae3b55"},"source":["df['three'] = df['one'] * df['two']\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>one</th>\n","      <th>two</th>\n","      <th>three</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>a</th>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>b</th>\n","      <td>2.0</td>\n","      <td>2</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>c</th>\n","      <td>3.0</td>\n","      <td>3</td>\n","      <td>9.0</td>\n","    </tr>\n","    <tr>\n","      <th>d</th>\n","      <td>NaN</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   one  two  three\n","a  1.0    1    1.0\n","b  2.0    2    4.0\n","c  3.0    3    9.0\n","d  NaN    4    NaN"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"MNg4pwYGKEc9","outputId":"50dbb3b4-c7ce-43f0-8a90-5b771ea868c5"},"source":["# concatinating\n","df2=pd.DataFrame({'one':{'e':0,'f':1},'one_tr':{'e':2}})\n","df2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>one</th>\n","      <th>one_tr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>e</th>\n","      <td>0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>f</th>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   one  one_tr\n","e    0     2.0\n","f    1     NaN"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"code","metadata":{"id":"I-ShI82vKEdA","outputId":"22b0938d-3a82-459a-fce5-a0928d02c9a5"},"source":["pd.concat([df,df2], sort=False)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>one</th>\n","      <th>two</th>\n","      <th>three</th>\n","      <th>one_tr</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>a</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>b</th>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>c</th>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>9.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>d</th>\n","      <td>NaN</td>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>e</th>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>f</th>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   one  two  three  one_tr\n","a  1.0  1.0    1.0     NaN\n","b  2.0  2.0    4.0     NaN\n","c  3.0  3.0    9.0     NaN\n","d  NaN  4.0    NaN     NaN\n","e  0.0  NaN    NaN     2.0\n","f  1.0  NaN    NaN     NaN"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"x5RGTWeJKEdD"},"source":["Теперь попробуем поработать с настоящими данными"]},{"cell_type":"markdown","metadata":{"id":"WFkC_UHeKEdE"},"source":["### Скачать данные: https://www.kaggle.com/ramamet4/app-store-apple-data-set-10k-apps"]},{"cell_type":"code","metadata":{"scrolled":false,"id":"dqtGkM6nKEdF","executionInfo":{"status":"ok","timestamp":1602911614512,"user_tz":-180,"elapsed":750,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["# !wget https://www.dropbox.com/s/o9uiqxb3yr6ch6k/app-store-apple-data-set-10k-apps.zip?dl=0\n","# !unzip app-store-apple-data-set-10k-apps.zip?dl=0"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"y7AuGs8PKEdI","executionInfo":{"status":"error","timestamp":1602911614778,"user_tz":-180,"elapsed":1005,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}},"outputId":"03c35514-2d52-4a6d-8be6-27bda31627cc","colab":{"base_uri":"https://localhost:8080/","height":459}},"source":["data = pd.read_csv('AppleStore.csv')\n","\n","# вывести первые 5 строк\n","# data.head(10)\n","# вывести последние 5 строк\n","# data.tail(5)\n","# вывести 5 случайных строк\n","data.sample(5)"],"execution_count":3,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-fcce8f2b4b8e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'AppleStore.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# вывести первые 5 строк\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# data.head(10)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# вывести последние 5 строк\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    684\u001b[0m     )\n\u001b[1;32m    685\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 686\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    450\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    451\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 452\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    453\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    454\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    934\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    935\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 936\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    937\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    938\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1166\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1167\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1168\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1169\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1170\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1996\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1997\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1998\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1999\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2000\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'AppleStore.csv'"]}]},{"cell_type":"code","metadata":{"id":"Ocew3Ak9KEdM","executionInfo":{"status":"aborted","timestamp":1602911614771,"user_tz":-180,"elapsed":990,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data = pd.read_csv('./AppleStore.csv', index_col=0)\n","\n","data.head()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ctQdw9QJKEdS"},"source":["Можно узнать размер таблицы, информацию о значениях таблицы, различные статистики по значениям"]},{"cell_type":"code","metadata":{"id":"KV2UGt9KKEdS","executionInfo":{"status":"aborted","timestamp":1602911614772,"user_tz":-180,"elapsed":984,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":false,"id":"0oYzDhBpKEdW","executionInfo":{"status":"aborted","timestamp":1602911614773,"user_tz":-180,"elapsed":978,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xYyCFU-gKEda","executionInfo":{"status":"aborted","timestamp":1602911614773,"user_tz":-180,"elapsed":970,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.describe()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rdrBkZtpKEde"},"source":["Чтобы посмотреть, какие колонки есть в таблице, можно воспользоваться `columns`"]},{"cell_type":"code","metadata":{"id":"mVyzFCv4KEdf","executionInfo":{"status":"aborted","timestamp":1602911614774,"user_tz":-180,"elapsed":964,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.columns"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uRfRUQlkKEdk"},"source":["Метод `values` преобразует `pd.DataFrame` к `np.ndarray`"]},{"cell_type":"code","metadata":{"id":"GHFLk7DnKEdl","executionInfo":{"status":"aborted","timestamp":1602911614774,"user_tz":-180,"elapsed":958,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-E1UUGpqKEdp","executionInfo":{"status":"aborted","timestamp":1602911614775,"user_tz":-180,"elapsed":951,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["type(data.values)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HU9j0uJfKEds","executionInfo":{"status":"aborted","timestamp":1602911614775,"user_tz":-180,"elapsed":944,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.values[:,0]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0EcySZfAKEd3"},"source":["Более продвинутое индексирование по таблице: **loc** и **iloc** "]},{"cell_type":"markdown","metadata":{"id":"DqQ6XxsRKEd4"},"source":["`iloc` - index-based selection"]},{"cell_type":"code","metadata":{"id":"Ki_Zeb_wKEd5","executionInfo":{"status":"aborted","timestamp":1602911614775,"user_tz":-180,"elapsed":934,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.iloc[0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SvSXVT20KEd9","executionInfo":{"status":"aborted","timestamp":1602911614776,"user_tz":-180,"elapsed":928,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.iloc[1:3, 1:3]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sEWLf65cKEeB","executionInfo":{"status":"aborted","timestamp":1602911614776,"user_tz":-180,"elapsed":920,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.iloc[[0,1,2], 0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sDo4wvskKEeH","executionInfo":{"status":"aborted","timestamp":1602911614777,"user_tz":-180,"elapsed":914,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.iloc[-1, :]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uH-2XtrkKEeL"},"source":["`loc` - label-based selection"]},{"cell_type":"code","metadata":{"id":"rh3UhwGmKEeM","executionInfo":{"status":"aborted","timestamp":1602911614777,"user_tz":-180,"elapsed":906,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["# первое значение - index, второе - имя колонки\n","data.loc[1, ['id', 'track_name', 'price']]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JwT-maQLKEeP"},"source":["**Choosing between loc and iloc**\n","\n","When choosing or transitioning between loc and iloc, there is one \"gotcha\" worth keeping in mind, which is that the two methods use slightly different indexing schemes.\n","\n","`iloc` uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So 0:10 will select entries 0,...,9. loc, meanwhile, indexes inclusively. So 0:10 will select entries 0,...,10.\n","\n","Why the change? Remember that loc can index any stdlib type: strings, for example. If we have a DataFrame with index values `Apples, ..., Potatoes, ...,` and we want to select \"all the alphabetical fruit choices between Apples and Potatoes\", then it's a lot more convenient to index `df.loc['Apples':'Potatoes']` than it is to index something like `df.loc['Apples', 'Potatoet']` (t coming after s in the alphabet).\n","\n","This is particularly confusing when the DataFrame index is a simple numerical list, e.g. 0,...,1000. In this case `df.iloc[0:1000]` will return 1000 entries, while `df.loc[0:1000]` return 1001 of them! To get 1000 elements using `loc`, you will need to go one lower and ask for `df.iloc[0:999]`.\n","\n","Otherwise, the semantics of using `loc` are the same as those for `iloc`."]},{"cell_type":"markdown","metadata":{"id":"0XZosDSjKEeQ"},"source":["`loc` может принимать булевы выражения (так же, как и в случае с `pd.Series`)\n","\n","Еще один полезный метод - `isin`"]},{"cell_type":"code","metadata":{"id":"h3GO_QN1KEeR","executionInfo":{"status":"aborted","timestamp":1602911614777,"user_tz":-180,"elapsed":900,"user":{"displayName":"kirill ionkin","photoUrl":"","userId":"05870578380605152071"}}},"source":["data.loc[data.prime_genre.isin(['Games', 'Shopping'])].head()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aDPmmMAFKEeV"},"source":["*Задания*"]},{"cell_type":"markdown","metadata":{"id":"AJKWM6WPKEeW"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"I4SDBKc8KEeW"},"source":["Получите ответ на следующие вопросы (с помощью pandas):\n","\n","1). Сколько приложений с максимальным рейтингом (`user_rating`)?\n","\n","2). Сколько всего жанров (`prime_genre`) и какие они? (Hint: `np.unique`)  \n","\n","3). Сколько суммарно байт (`size_bytes`) весят все приложения жанра Finance?  \n","\n","4). Сколько всего бесплатных приложений, у которых рейтинг юзеров больше трёх?  \n","\n","5). Есть ли приложения, которые стоят больше 100 долларов?\n","\n","6). Сколько приложений из жанра `Games` или `Shopping`, которые стоят дороже 10 USD или меньше 2 USD, но не являются бесплатными?"]},{"cell_type":"markdown","metadata":{"id":"x0PbCkn6KEeY"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"0oujQHwaKEeZ"},"source":["Мы разобрали только малую часть работы с `pandas`. Это действительно мощный инструмент для работы с данными и его возможности обширны\n","\n","Из того, что мы не разобрали, стоит обратить внимание на следующие вещи:\n","\n","* Работа с пропущенными значениями (`fillna`)\n","* Объединение таблиц (`join`)\n","* Применение к данным функций (`apply`, `applymap`)\n","* так же стоит посмотреть, как работать с базами данных в `pandas`"]},{"cell_type":"markdown","metadata":{"id":"wnTH0vkOKEeZ"},"source":["Список полезных ссылок:\n","\n","* Официальные туториалы: https://pandas.pydata.org/pandas-docs/stable/getting_started/tutorials.html\n","\n","* Официальная документация: https://pandas.pydata.org/pandas-docs/stable/\n","\n","* Статья на Хабре от OpenDataScience сообщества: https://habr.com/company/ods/blog/322626/\n","\n","* Подробный гайд: https://media.readthedocs.org/pdf/pandasguide/latest/pandasguide.pdf\n","\n","* Небольшой курс от kaggle: https://www.kaggle.com/learn/pandas"]},{"cell_type":"markdown","metadata":{"id":"if8Zbf2YKEea"},"source":["Главное в работе с новыми библиотеками -- не бояться тыкать в разные функции, смотреть типы возвращаемых объектов и активно пользоваться Яндексом, читать документацию на официальном сайте (она довольно хорошо написана), а ещё лучше понимать всё из docstring'а (`Shift+Tab` при нахождении курсора внутри скобок функции)."]}]}